<?xml version="1.0" encoding="UTF-8"?>
<project default="build">
  <!-- Sets the default properties. Override in your build file when needed. -->
  <property environment="env"/>
  <property name="project" value="base-build-xml"/>
  <property name="drupalroot" value="docroot"/>
  <property name="drupalsite" value="default"/>
  <!-- Drupal default credentials. -->
  <property name="db.url" value="sqlite://db.sqlite"/>
  <property name="admin.user" value="admin"/>
  <property name="admin.pass" value="admin"/>
  <!-- Path to Drupal themes. -->
  <property name="drupalthemes" value="sites/all/themes"/>
  <!-- Path to Drupal modules. -->
  <property name="drupalmodules" value="sites/all/modules"/>
  <!-- Path to Drupal libraries. -->
  <property name="drupallibraries" value="sites/all/libraries"/>
  <!-- Path to Drupal files. -->
  <property name="drupalfiles" value="sites/${drupalsite}/files"/>
  <!-- Drupal URL. -->
  <property name="drushurl" value=""/>
  <!-- Path to existing Drupal's db file to import. -->
  <property name="drupaldbfile" value="drupal.sql"/>
  <!-- Path to existing file with list of modules to enable. -->
  <property name="modules-contrib-file" value="contrib.txt"/>
  <property name="modules-custom-file" value="custom.txt"/>
  <property name="modules-devel-file" value="devel.txt"/>
  <property name="modules-features-file" value="features.txt"/>
  <!-- Define Composer's main directory (location of composer.json file). -->
  <property name="composerdir" value="${basedir}"/>
  <!-- Composer's vendor dir. -->
  <property name="vendordir" value="${composerdir}/vendor"/>
  <!-- Define Composer's bin-dir. -->
  <property name="vendorbindir" value="${vendordir}/bin"/>
  <!-- Define Composer's executable binary file. -->
  <property name="composerbinfile" value="${vendorbindir}/composer.phar"/>
  <property name="composersite" value="all"/>
  <!-- Build dir for result files. -->
  <property name="builddir" value="${composerdir}/build"/>
  <!-- Base build scripts dir. -->
  <property name="scriptsdir" value="${vendordir}/NT/base-build-xml/scripts"/>
  <property name="fileexts" value="php,module,inc,install,profile,theme"/>
  <property name="fileextsexp" value="*.php,*.module,*.inc,*.install,*.profile,*.theme"/>
  <property name="phpunitxml" value="${composerdir}/phpunit-ci.xml"/>
  <property name="pdependarg" value="--quiet"/>
  <property name="webservicename" value=""/>
  <property name="webservicerouterfile" value=""/>
  <available file="${basedir}/${drupalroot}/index.php" property="drupal.exists"/>
  <available file="${basedir}/${drupalroot}/sites/${drupalsite}/settings.php" property="drupal.settings.exists"/>
  <available file="${basedir}/${drupalroot}/sites/${drupalsite}/example.settings.local.php" property="drupal.example.settings.exists"/>
  <available file="${composerdir}/composer.skip" property="composer.executed"/>
  <available file="${composerbinfile}" property="composer.exists"/>
  <available file="${phpunitxml}" property="phpunit.xml.exists"/>
  <available file="${drupaldbfile}" property="drupaldbfile.exists"/>
  <available file="${basedir}/build.properties" property="build.properties.exists"/>
  <available file="${scriptsdir}" property="scriptsdir.exists"/>
  <!-- Verify the presence of files consisting list of modules to enable. -->
  <available file="${basedir}/${modules-contrib-file}" property="contrib.txt.exists"/>
  <available file="${basedir}/${modules-custom-file}" property="custom.txt.exists"/>
  <available file="${basedir}/${modules-devel-file}" property="devel.txt.exists"/>
  <available file="${basedir}/${modules-features-file}" property="features.txt.exists"/>
  <!-- Load properties from the file when present. -->
  <condition property="parallel-lint" value="${vendorbindir}/parallel-lint.bat" else="${vendorbindir}/parallel-lint">
    <os family="windows"/>
  </condition>
  <target name="build" depends="prepare,parallel-lint,phploc,pdepend,phpmd-ci,phpcs-security-ci,phpcs-coder-ci,phpcpd,phpunit,behat,phpcov,phpcb"/>
  <target name="build-parallel" depends="prepare,run-tests"/>
  <target name="run-tests" description="Run tools in parallel">
    <parallel threadCount="2">
      <sequential>
        <antcall target="pdepend"/>
        <antcall target="phpmd-ci"/>
      </sequential>
      <antcall target="docblox"/>
      <antcall target="parallel-lint"/>
      <antcall target="phpcb"/>
      <antcall target="phpcov"/>
      <antcall target="phpcpd"/>
      <antcall target="phpcs-coder-ci"/>
      <antcall target="phpcs-security-ci"/>
      <antcall target="phploc"/>
      <antcall target="phpunit"/>
    </parallel>
  </target>
  <target name="clean" description="Cleanup build artifacts">
    <delete dir="${builddir}/api"/>
    <delete dir="${builddir}/behat"/>
    <delete dir="${builddir}/cache"/>
    <delete dir="${builddir}/code-browser"/>
    <delete dir="${builddir}/coverage"/>
    <delete dir="${builddir}/logs"/>
    <delete dir="${builddir}/pdepend"/>
    <delete dir="${builddir}/phpcs"/>
    <delete dir="${builddir}/phploc"/>
    <delete dir="${builddir}/phpmd"/>
    <delete file="${composerdir}/composer.lock"/>
    <delete file="${composerdir}/composer.skip"/>
  </target>
  <target name="prepare" depends="load-build-properties,clean,composer" description="Prepare for build">
    <mkdir dir="${builddir}/api"/>
    <mkdir dir="${builddir}/behat"/>
    <mkdir dir="${builddir}/cache"/>
    <mkdir dir="${builddir}/code-browser"/>
    <mkdir dir="${builddir}/coverage"/>
    <mkdir dir="${builddir}/logs"/>
    <mkdir dir="${builddir}/logs/coverage"/>
    <mkdir dir="${builddir}/logs/junit"/>
    <mkdir dir="${builddir}/pdepend"/>
    <mkdir dir="${builddir}/phpcs"/>
    <mkdir dir="${builddir}/phpdox"/>
    <mkdir dir="${builddir}/phploc"/>
    <mkdir dir="${builddir}/phpmd"/>
  </target>
  <target name="load-build-properties" description="Load properties from the file." if="build.properties.exists">
    <property file="build.properties"/>
  </target>
  <!-- Define set of files -->
  <fileset id="drupal.fileset" dir="${drupalroot}">
    <include name="sites/**/*.php"/>
    <include name="sites/**/*.inc"/>
    <include name="sites/**/*.module"/>
    <include name="sites/**/*.install"/>
    <include name="sites/**/*.profile"/>
    <include name="sites/**/*.theme"/>
    <!-- Excludes Drupal files folder. -->
    <exclude name="${drupalfiles}/*"/>
    <!-- Excludes any vendor dirs within Drupal root. -->
    <exclude name="sites/**/vendor/**"/>
    <!-- Excludes coder_sniffer dir. -->
    <exclude name="sites/**/coder_sniffer/Drupal/Test/**/*.php"/>
    <!-- @see: https://github.com/symfony/symfony/issues/11921 -->
    <exclude name="${drupallibraries}/**/Tests/**/*.php"/>
    <!-- @see: https://github.com/symfony/polyfill/issues/108 -->
    <exclude name="${drupallibraries}/**/Resources/**/*.php"/>
    <modified>
      <param name="cache.cachefile" value="${builddir}/cache/${project}.drupal.fileset.properties"/>
    </modified>
  </fileset>
  <fileset id="composer.fileset" dir="${composerdir}">
    <include name="**/*.php"/>
    <!-- Excludes coder_sniffer dir. -->
    <exclude name="vendor/**/coder_sniffer/Drupal/Test/**/*.php"/>
    <!-- E.g. squizlabs/php_codesniffer/CodeSniffer -->
    <exclude name="vendor/**/CodeSniffer/**"/>
    <!-- Ignores all PHP files found within vendor dir. -->
    <exclude name="vendor/**/*.php"/>
    <!-- @see: https://github.com/symfony/polyfill/issues/108 -->
    <exclude name="vendor/**/Resources/**/*.php"/>
    <!-- E.g. vendor/jakub-onderka/php-parallel-lint/tests/examples -->
    <exclude name="vendor/**/examples/**/*.php"/>
    <!-- E.g. vendor/pdepend/pdepend/src/test/resources/files -->
    <exclude name="vendor/**/resources/**/*.php"/>
    <modified>
      <param name="cache.cachefile" value="${builddir}/cache/${project}.composer.fileset.properties"/>
    </modified>
  </fileset>
  <target name="lint" depends="prepare,drupal-core" if="drupal.exists">
    <apply executable="php" parallel="true" verbose="true" dir="${basedir}" failonerror="true">
      <arg value="-l"/>
      <fileset refid="composer.fileset"/>
    </apply>
    <apply executable="php" parallel="true" verbose="true" dir="${basedir}" failonerror="true">
      <arg value="-l"/>
      <fileset refid="drupal.fileset"/>
    </apply>
  </target>
  <target name="parallel-lint" description="Run PHP parallel lint" depends="prepare,drupal-core" if="drupal.exists">
    <apply executable="${parallel-lint}" parallel="true" maxparallel="1000" dir="${basedir}" failonerror="true">
      <arg line="-e"/>
      <arg value="${fileexts}"/>
      <fileset refid="composer.fileset"/>
    </apply>
    <apply executable="${parallel-lint}" parallel="true" maxparallel="1000" dir="${basedir}" failonerror="true">
      <arg line="-e"/>
      <arg value="${fileexts}"/>
      <fileset refid="drupal.fileset"/>
    </apply>
  </target>
  <target name="phploc" description="Measure project size using PHPLOC" unless="phploc.csv.present">
    <exec executable="${vendorbindir}/phploc">
      <arg value="--log-csv"/>
      <arg value="${builddir}/phploc/phploc.csv"/>
      <arg value="--names"/>
      <arg value="${fileextsexp}"/>
      <arg path="${drupalroot}/${drupalmodules}"/>
      <arg path="${drupalroot}/${drupalthemes}"/>
    </exec>
    <available file="${builddir}/phploc/phploc.csv" property="phploc.csv.present"/>
  </target>
  <target name="pdepend" depends="composer" description="Calculate software metrics using PHP Depend" unless="pdepend.xml.present">
    <exec executable="${vendorbindir}/pdepend">
      <arg value="-d"/>
      <arg value="memory_limit=256M"/>
      <arg value="--suffix=${fileexts}"/>
      <arg value="--jdepend-xml=${builddir}/pdepend/jdepend.xml"/>
      <arg value="--jdepend-chart=${builddir}/pdepend/jdepend-dependency-chart.svg"/>
      <arg value="--overview-pyramid=${builddir}/pdepend/pdepend-overview-pyramid.svg"/>
      <arg value="--summary-xml=${builddir}/pdepend/pdepend-summary.xml"/>
      <arg value="${pdependarg}"/>
      <arg path="${drupalroot}/${drupalmodules}"/>
    </exec>
    <available file="${builddir}/pdepend/pdepend-summary.xml" property="pdepend.xml.present"/>
  </target>
  <target name="phpmd" depends="composer,drupal-core" description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing.">
    <exec executable="${vendorbindir}/phpmd">
      <arg value="--suffixes"/>
      <arg value="${fileexts}"/>
      <arg path="${drupalroot}/${drupalmodules}"/>
      <arg value="text"/>
      <!--<arg value="${builddir}/phpmd.xml"/>-->
      <arg value="codesize,unusedcode,naming"/>
    </exec>
  </target>
  <target name="phpmd-ci" depends="composer,drupal-core" description="Perform project mess detection using PHPMD creating a log file for the continuous integration server" unless="phpmd.xml.present">
    <exec executable="${vendorbindir}/phpmd">
      <arg value="--suffixes"/>
      <arg value="${fileexts}"/>
      <arg path="${drupalroot}/${drupalmodules}"/>
      <arg value="xml"/>
      <arg value="codesize,unusedcode,naming"/>
      <arg value="--reportfile"/>
      <arg value="${builddir}/phpmd/phpmd.xml"/>
    </exec>
    <available file="${builddir}/phpmd/phpmd.xml" property="phpmd.xml.present"/>
  </target>
  <target name="phpcs-check" depends="composer" description="Checks installed coding standards.">
    <exec executable="${vendorbindir}/phpcs">
      <arg value="-i"/>
    </exec>
  </target>
  <target name="phpcs-coder" depends="composer,phpcs-check" if="drupal.exists" description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">
    <exec executable="${vendorbindir}/phpcs">
      <arg value="-d"/>
      <arg value="memory_limit=256M"/>
      <arg value="--standard=Drupal,DrupalPractice"/>
      <arg value="--extensions=${fileexts}"/>
      <arg path="${drupalroot}/${drupalmodules}"/>
      <arg path="${drupalroot}/${drupalthemes}"/>
    </exec>
  </target>
  <target name="phpcs-coder-ci" depends="composer,phpcs-check" if="drupal.exists" description="Find coding standard violations using PHP_CodeSniffer creating a log file for the continuous integration server.">
    <exec executable="${vendorbindir}/phpcs">
      <arg value="-d"/>
      <arg value="memory_limit=256M"/>
      <arg value="--standard=Drupal,DrupalPractice"/>
      <arg value="--report=checkstyle"/>
      <arg value="--report-file=${builddir}/phpcs/phpcs-checkstyle.xml"/>
      <arg value="--report-xml=${builddir}/phpcs/phpcs-codesniffer.xml"/>
      <arg value="--extensions=${fileexts}"/>
      <arg path="${drupalroot}/${drupalmodules}"/>
      <arg path="${drupalroot}/${drupalthemes}"/>
    </exec>
  </target>
  <target name="phpcs-security" depends="composer,phpcs-check" description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">
    <!-- @see: https://github.com/FloeDesignTechnologies/phpcs-security-audit/issues/2 -->
    <symlink link="${vendordir}/squizlabs/php_codesniffer/CodeSniffer/Standards/Security"
             resource="${vendordir}/pheromone/phpcs-security-audit/Security"
             overwrite="true"/>
    <exec executable="${vendorbindir}/phpcs">
      <arg value="-d"/>
      <arg value="memory_limit=256M"/>
      <arg value="--standard=${vendordir}/pheromone/phpcs-security-audit/example_drupal7_ruleset.xml"/>
      <arg value="--extensions={fileexts}"/>
      <arg path="${drupalroot}/${drupalmodules}"/>
      <arg path="${drupalroot}/${drupalthemes}"/>
    </exec>
  </target>
  <target name="phpcs-security-ci" depends="composer,phpcs-check" description="Find coding standard violations using PHP_CodeSniffer creating a log file for the continuous integration server">
    <!-- @see: https://github.com/FloeDesignTechnologies/phpcs-security-audit/issues/2 -->
    <symlink link="${vendordir}/squizlabs/php_codesniffer/CodeSniffer/Standards/Security"
             resource="${vendordir}/pheromone/phpcs-security-audit/Security"
             overwrite="true"/>
    <exec executable="${vendorbindir}/phpcs">
      <arg value="-d"/>
      <arg value="memory_limit=256M"/>
      <arg value="--report=checkstyle"/>
      <arg value="--standard=${vendordir}/pheromone/phpcs-security-audit/example_drupal7_ruleset.xml"/>
      <arg value="--extensions=${fileexts}"/>
      <arg value="--report-file=${builddir}/phpcs/phpcs-checkstyle-security.xml"/>
      <arg value="--report-xml=${builddir}/phpcs/phpcs-codesniffer-security.xml"/>
      <arg path="${drupalroot}/${drupalmodules}"/>
      <arg path="${drupalroot}/${drupalthemes}"/>
    </exec>
  </target>
  <target name="phpcpd" description="Find duplicate code using PHPCPD">
    <exec executable="${vendorbindir}/phpcpd">
      <arg value="--log-pmd"/>
      <arg value="${builddir}/logs/pmd-cpd.xml"/>
      <arg value="--names"/>
      <arg value="${fileextsexp}"/>
      <arg value="--exclude"/>
      <arg value="${vendordir}"/>
      <arg path="${drupalroot}/${drupalmodules}"/>
    </exec>
  </target>
  <target name="docblox" description="Generate API documentation using docblox">
    <exec executable="${vendorbindir}/docblox">
      <arg value="-d"/>
      <arg value="${drupalroot}/${drupalmodules}"/>
      <arg value="-t"/>
      <arg value="${builddir}/phpdox"/>
    </exec>
  </target>
  <target name="phpunit" description="Run unit tests with PHPUnit" depends="composer" if="phpunit.xml.exists">
    <exec executable="${vendorbindir}/phpunit" failonerror="true">
      <env key="PATH" value="${vendorbindir}:${env.PATH}"/>
      <arg value="-d"/>
      <arg value="memory_limit=2G"/>
      <arg value="-c"/>
      <arg value="${phpunitxml}"/>
      <arg value="--testsuite"/>
      <arg value="All Code"/>
      <arg path="${drupalroot}/${drupalmodules}"/>
    </exec>
  </target>
  <target name="behat" description="Wrapper for BDD tests with Behat" depends="composer,phantomjs-start,php-webserver-start,webservice-start,drupal-code-coverage-enable,behat-test,behat-run" if="scriptsdir.exists">
    <antcall target="webservice-stop"/>
    <antcall target="php-webserver-stop"/>
    <antcall target="phantomjs-stop"/>
    <antcall target="database-drop"/>
    <fail unless="BehatDryRun" message="Behat Dry run failed so there are faulty feature files" />
  </target>
  <target name="behat-run" description="Run BDD tests with Behat" depends="composer" if="BehatDryRun">
    <exec executable="${vendorbindir}/behat" failonerror="false" dir="${composerdir}">
      <env key="PATH" value="${env.PATH}:${vendorbindir}"/>
      <arg value="--profile"/>
      <arg value="ci"/>
    </exec>
  </target>
  <target name="behat-test" description="Dry Run BDD tests with Behat" depends="composer">
    <exec executable="${vendorbindir}/behat" failonerror="false" dir="${composerdir}" resultproperty="BehatErrorCode">
      <env key="PATH" value="${env.PATH}:${vendorbindir}"/>
      <arg value="--dry-run"/>
      <arg value="--format"/>
      <arg value="progress"/>
    </exec>
    <condition property="BehatDryRun">
      <equals arg1="${BehatErrorCode}" arg2="0"/>
    </condition>
  </target>
  <target name="behat-system" description="Wrapper for BDD tests with Behat" depends="composer,phantomjs-start,php-webserver-start,webservice-start,drupal-code-coverage-enable,behat-test,behat-system-run" if="scriptsdir.exists">
    <antcall target="webservice-stop"/>
    <antcall target="php-webserver-stop"/>
    <antcall target="phantomjs-stop"/>
    <antcall target="database-drop"/>
    <fail unless="BehatDryRun" message="Behat Dry run failed so there are faulty feature files"/>
  </target>
  <target name="behat-system-run" description="Run BDD tests with Behat" depends="composer" if="BehatDryRun">
      <exec executable="${vendorbindir}/behat" failonerror="false" dir="${basedir}/tests">
        <arg value="--profile"/>
        <arg value="systemTest"/>
      </exec>
  </target>
  <target name="phpcov" depends="composer" description="Generate HTML and clover output for coverage">
    <exec executable="${vendorbindir}/phpcov">
      <arg value="merge"/>
      <arg value="--clover=${builddir}/coverage/combined_clover.xml"/>
      <arg value="${builddir}/logs/coverage/"/>
    </exec>
    <exec executable="${vendorbindir}/phpcov">
      <arg value="merge"/>
      <arg value="--html=${builddir}/coverage/html"/>
      <arg value="${builddir}/logs/coverage/"/>
    </exec>
  </target>
  <target name="composer" description="Run Composer" depends="composer-check,composer-install,composer-update,composer-show" unless="composer.executed">
    <property name="composer.executed" value="true"/>
  </target>
  <target name="get-composer" description="Get Composer" unless="composer.exists">
    <mkdir dir="${vendorbindir}"/>
    <get dest="${vendorbindir}" skipexisting="true">
      <url url="https://getcomposer.org/composer.phar"/>
    </get>
    <available file="${composerbinfile}" property="composer.exists"/>
  </target>
  <target name="composer-check" description="Check Composer" depends="get-composer">
    <exec executable="php" failonerror="true" dir="${composerdir}">
      <arg value="${composerbinfile}"/>
      <arg value="self-update"/>
    </exec>
    <exec executable="php" failonerror="true" dir="${composerdir}" outputproperty="vendorbindir">
      <arg value="${composerbinfile}"/>
      <arg value="config"/>
      <arg value="bin-dir"/>
    </exec>
  </target>
  <target name="composer-install" description="Run Composer install" depends="get-composer" unless="composer.lock.exists">
    <exec executable="php" failonerror="true" dir="${composerdir}">
      <arg value="${composerbinfile}"/>
      <arg value="install"/>
      <arg value="--prefer-dist"/>
    </exec>
    <available file="${composerdir}/composer.lock" property="composer.lock.exists"/>
  </target>
  <target name="composer-update" description="Run Composer update" depends="get-composer" if="composer.lock.exists">
    <exec executable="php" failonerror="true" dir="${composerdir}">
      <arg value="${composerbinfile}"/>
      <arg value="update"/>
      <arg value="--prefer-dist"/>
    </exec>
    <available file="${composerdir}/composer.lock" property="composer.lock.exists"/>
  </target>
  <target name="composer-show" description="Run Composer show" depends="get-composer,composer-show-config" if="composer.lock.exists">
    <exec executable="php" failonerror="true" dir="${composerdir}" outputproperty="output-composer-show">
      <arg value="${composerbinfile}"/>
      <arg value="show"/>
    </exec>
    <echo message="${output-composer-show}"/>
  </target>
  <target name="composer-show-config" description="Show composer config settings" depends="get-composer">
    <exec executable="php" failonerror="true" dir="${composerdir}" outputproperty="output-composer-config">
      <arg value="${composerbinfile}"/>
      <arg value="config"/>
      <arg value="--list"/>
    </exec>
    <echo message="${output-composer-config}"/>
  </target>
  <target name="phpcb" depends="composer" description="Aggregate tool output with PHP_CodeBrowser" if="drupal.exists">
    <exec executable="${vendorbindir}/phpcb">
      <arg value="--log"/>
      <arg path="${builddir}/logs"/>
      <arg value="--source"/>
      <arg path="${drupalroot}/${drupalmodules}"/>
      <arg value="--output"/>
      <arg path="${builddir}/code-browser"/>
    </exec>
  </target>
  <target name="drupal-core" depends="composer" description="Download Drupal via Drush" unless="drupal.exists">
    <exec executable="${vendorbindir}/drush" dir="${basedir}/${drupalroot}/..">
      <arg value="-y"/>
      <arg value="dl"/>
      <arg value="drupal-7"/>
    </exec>
    <dirset dir="${basedir}" includes="drupal-7.*" id="drupaldir"/>
    <fail message="Multiple or zero Drupal directories found: ${toString:drupaldir}!">
      <condition>
        <not>
          <resourcecount refid="drupaldir" when="equal" count="1"/>
        </not>
      </condition>
    </fail>
    <symlink link="${basedir}/${drupalroot}" resource="${toString:drupaldir}" overwrite="true"/>
    <available file="${basedir}/${drupalroot}/index.php" property="drupal.exists"/>
  </target>
  <target name="drupal-install" description="Install Drupal" depends="composer,drupal-core,database-configure,database-drop" unless="drupal.settings.exists">
    <echo message="Running site install against Drupal"/>
    <exec executable="${vendorbindir}/drush" dir="${basedir}/${drupalroot}">
      <arg value="site-install"/>
      <arg value="-y"/>
      <arg value="minimal"/>
      <arg value="--account-name=${admin.user}"/>
      <arg value="--account-pass=${admin.pass}"/>
      <arg value="--db-url=${db.url}"/>
    </exec>
    <chmod file="${basedir}/${drupalroot}/sites/default/settings.php" perm="+rw" type="file"/>
    <chmod file="${basedir}/${drupalroot}/sites/default" perm="+rwx" type="dir"/>
  </target>
  <target name="php-webserver-start" if="scriptsdir.exists" description="Start a simple webserver for PHP files" depends="drupal-setup">
    <exec executable="${scriptsdir}/start_php_web.sh" dir="${basedir}/${drupalroot}" spawn="true"/>
  </target>
  <target name="php-webserver-stop" if="scriptsdir.exists" description="Stop a simple webserver for PHP files">
    <exec executable="${scriptsdir}/stop_php_web.sh" dir="${basedir}/${drupalroot}" spawn="true"/>
  </target>
  <target name="phantomjs-start" if="scriptsdir.exists" description="Start a phantomjs">
    <exec executable="${scriptsdir}/start_phantomjs.sh" dir="${scriptsdir}" spawn="true"/>
  </target>
  <target name="phantomjs-stop" if="scriptsdir.exists" description="Stop a phantomjs">
    <exec executable="${scriptsdir}/stop_phantomjs.sh" dir="${scriptsdir}" spawn="true"/>
  </target>
  <target name="webserver-start" if="scriptsdir.exists" description="Start a simple webserver for json files">
    <exec executable="${scriptsdir}/start_web.sh" dir="${scriptsdir}" spawn="true"/>
  </target>
  <target name="webserver-stop" if="scriptsdir.exists" description="Stop a simple webserver for json files">
    <exec executable="${scriptsdir}/stop_web.sh" dir="${scriptsdir}" spawn="true"/>
  </target>
  <target name="webservice-start" if="scriptsdir.exists" description="Start the web service">
    <exec executable="${scriptsdir}/start_service.sh" dir="${scriptsdir}" spawn="true">
      <arg value="${webservicename}"/>
      <arg value="${webservicerouterfile}"/>
    </exec>
  </target>
  <target name="webservice-stop" if="scriptsdir.exists" description="Stop the web service">
    <exec executable="${scriptsdir}/stop_service.sh" dir="${basedir}" spawn="true">
      <arg value="${webservicename}"/>
    </exec>
  </target>
  <target name="database-configure" description="Configure settings.local.php file" if="settings.local.php.exists">
    <copy file="${basedir}/${drupalroot}/sites/default/example.settings.local.php" tofile="${basedir}/${drupalroot}/sites/default/settings.local.php" overwrite="yes"/>
    <exec executable="ex" failonerror="true" dir="${basedir}/${drupalroot}">
      <arg value="${basedir}/${drupalroot}/sites/default/settings.local.php"/>
      <arg value="+%s/'database'.*=&gt;.*'\zs.*\ze'/${db.name}/"/>
      <arg value="+%s/'username'.*=&gt;.*'\zs.*\ze'/${db.user}/"/>
      <arg value="+%s/'password'.*=&gt;.*'\zs.*\ze'/${db.pass}/"/>
      <arg value="+%s/'host'.*=&gt;.*'\zs.*\ze'/${db.host}/"/>
      <arg value="-scwq!"/>
    </exec>
    <available file="${basedir}/${drupalroot}/sites/default/settings.local.php" property="settings.local.php.exists"/>
  </target>
  <target name="drupal-setup" description="Setup Drupal installation" depends="composer,drupal-core,database-setup" unless="drupal.settings.exists">
    <exec executable="${vendorbindir}/drush" dir="${basedir}/${drupalroot}">
      <arg value="status"/>
    </exec>
  </target>
  <target name="database-setup" description="Setup the database" if="drupal.exists" depends="database-import,drupal-install">
  </target>
  <target name="database-import" description="Import the database" if="drupaldbfile.exists" depends="composer,drupal-core,database-configure,database-drop">
    <exec executable="bash" failonerror="true" dir="${basedir}/${drupalroot}" input="${drupaldbfile}">
      <arg value="-c"/>
      <arg value="`${vendorbindir}/drush sql-connect`"/>
    </exec>
  </target>
  <target name="database-drop" description="Clean the database" if="drupaldbfile.exists">
    <exec executable="${vendorbindir}/drush" failonerror="true" dir="${basedir}/${drupalroot}">
      <arg value="sql-drop"/>
      <arg value="--yes"/>
    </exec>
  </target>
  <target name="junit-xml-check" description="Checks whether JUnits XML results files exists">
    <fileset id="behat-xml-files" dir="${builddir}/behat">
      <include name="*.xml"/>
    </fileset>
    <fail message="Behat XML files not found!">
      <condition>
        <not>
          <resourcecount refid="behat-xml-files" when="greater" count="0"/>
        </not>
      </condition>
    </fail>
  </target>
  <target name="junit-xml-combine" depends="junit-xml-check" if="behat-xml-files" description="Combine JUnits XML results files into a single for using on other apps">
    <copy file="${builddir}/coverage/combined_clover.xml" todir="${builddir}/logs" failonerror="false"/>
    <pathconvert refid="behat-xml-files" property="converted" pathsep=" "/>
    <exec executable="${scriptsdir}/merge_junit_results.py" output="${builddir}/logs/junit/combined_junit.xml" failonerror="false">
      <env key="PATH" value="/opt/rh/python27/root/usr/bin:${env.PATH}"/>
      <env key="LD_LIBRARY_PATH" value="/opt/rh/python27/root/usr/lib64:${env.LD_LIBRARY_PATH}"/>
      <arg line="${converted}"/>
    </exec>
    <copy file="${builddir}/logs/junit.xml" todir="${builddir}/logs/junit" failonerror="false"/>
    <exec executable="${vendorbindir}/phpjunitmerge" failonerror="false">
      <arg value="${builddir}/logs/junit"/>
      <arg value="${builddir}/logs/combined_junit.xml"/>
    </exec>
  </target>
  <!-- Drupal targets -->
  <target name="drupal-build" depends="drupal-install,modules-enable-contrib,modules-enable-custom,modules-enable-features,drupal-composer"/>
  <target name="drupal-code-coverage-enable" depends="drupal-setup" description="Drush to enable code_coverage module to allow its capture during BDD tests">
    <exec executable="${vendorbindir}/drush" dir="${basedir}/${drupalroot}">
      <arg value="-y"/>
      <arg value="en"/>
      <arg value="code_coverage"/>
    </exec>
  </target>
  <target name="drupal-composer" description="Drush to install composer dependencies" if="drupal.exists" depends="composer,drupal-setup">
    <exec executable="${vendorbindir}/drush" dir="${basedir}/${drupalroot}">
      <arg value="-y"/>
      <arg value="en"/>
      <arg value="composer_manager"/>
    </exec>
    <exec executable="${vendorbindir}/drush" dir="${basedir}/${drupalroot}">
      <arg value="composer-json-rebuild"/>
      <arg value="--no-dev"/>
      <arg value="-o"/>
    </exec>
    <exec executable="php" dir="${composerdir}">
      <env key="COMPOSER_VENDOR_DIR" value="${drupalroot}/${drupallibraries}/composer"/>
      <env key="COMPOSER" value="${drupalroot}/${drupalfiles}/composer/composer.json"/>
      <arg value="${composerbinfile}"/>
      <arg value="update"/>
      <arg value="--no-dev"/>
      <arg value="--prefer-source"/>
      <arg value="-o"/>
    </exec>
    <exec executable="php" dir="${composerdir}">
      <env key="COMPOSER_VENDOR_DIR" value="${drupalroot}/${drupallibraries}/composer"/>
      <env key="COMPOSER" value="${drupalroot}/${drupalfiles}/composer/composer.json"/>
      <arg value="${composerbinfile}"/>
      <arg value="dump-autoload"/>
    </exec>
  </target>
  <target name="modules-enable-contrib" description="Enables Drupal contrib modules." if="contrib.txt.exists">
    <antcall target="modules-enable">
      <param name="file" value="${contrib.txt.exists}"/>
    </antcall>
  </target>
  <target name="modules-enable-custom" description="Enables Drupal custom modules." if="custom.txt.exists">
    <antcall target="modules-enable">
      <param name="file" value="${custom.txt.exists}"/>
    </antcall>
  </target>
  <target name="modules-enable-devel" description="Enables Drupal development modules." if="devel.txt.exists">
    <antcall target="modules-enable">
      <param name="file" value="${devel.txt.exists}"/>
    </antcall>
  </target>
  <target name="modules-enable-features" description="Enables Drupal features modules." if="features.txt.exists">
    <antcall target="modules-enable">
      <param name="file" value="${features.txt.exists}"/>
    </antcall>
  </target>
  <target name="modules-enable" depends="drupal-setup" description="Runs Drush to enable modules listed in the file.">
    <exec executable="bash" dir="${drupalroot}">
      <env key="PATH" value="${env.PATH}:${vendorbindir}"/>
      <arg value="-c"/>
      <arg value="cat ${file} | xargs drush -y en"/>
    </exec>
  </target>
  <target name="drupal-settings-check">
    <available file="${basedir}/${drupalroot}/sites/default/settings.php" property="settings.php.exists"/>
  </target>
  <target name="drupal-settings-remove" depends="drupal-settings-check" if="settings.php.exists">
    <delete file="${drupalroot}/sites/${drupalsite}/settings.php"/>
  </target>
</project>
