<?xml version="1.0" encoding="UTF-8"?>
<project>
  <!-- Sets the default properties. Override in your build file when needed. -->
  <property environment="env"/>
  <property name="project" value="base-build-xml"/>
  <property name="drupalroot" value="docroot"/>
  <property name="drupalsite" value="default"/>
  <!-- Path to Drupal themes. -->
  <property name="drupalthemes" value="${drupalroot}/sites/all/themes"/>
  <!-- Path to Drupal modules. -->
  <property name="drupalmodules" value="${drupalroot}/sites/all/modules"/>
  <!-- Path to Drupal libraries. -->
  <property name="drupallibraries" value="${drupalroot}/sites/all/libraries"/>
  <!-- Path to Drupal files. -->
  <property name="drupalfiles" value="${drupalroot}/sites/${drupalsite}/files"/>
  <!-- Drupal URL. -->
  <property name="drushurl" value=""/>
  <!-- Path to existing Drupal's db file to import. -->
  <property name="drupaldbfile" value="drupal.sql"/>
  <!-- Path to existing file with list of modules to enable. -->
  <property name="modules-contrib-file" value="contrib.txt"/>
  <property name="modules-custom-file" value="custom.txt"/>
  <property name="modules-devel-file" value="devel.txt"/>
  <property name="modules-features-file" value="features.txt"/>
  <!-- Define Composer's main directory (location of composer.json file). -->
  <property name="composerdir" value="${basedir}"/>
  <!-- Composer's vendor dir. -->
  <property name="vendordir" value="${composerdir}/vendor"/>
  <!-- Define Composer's bin-dir. -->
  <property name="vendorbindir" value="${vendordir}/composer/bin"/>
  <!-- Define Composer's executable binary file. -->
  <property name="composerbinfile" value="${vendorbindir}/composer.phar"/>
  <property name="composersite" value="all"/>
  <!-- Build dir for result files. -->
  <property name="builddir" value="${composerdir}/build"/>
  <!-- Base build scripts dir. -->
  <property name="scriptsdir" value="${vendordir}/NT/base-build-xml/scripts"/>
  <property name="fileexts" value="php,module,inc,install,profile,theme"/>
  <property name="fileextsexp" value="*.php,*.module,*.inc,*.install,*.profile,*.theme"/>
  <property name="phpunitxml" value="${composerdir}/phpunit-ci.xml"/>
  <property name="pdependarg" value="--quiet"/>
  <property name="webservicename" value=""/>
  <property name="webservicerouterfile" value=""/>
  <available file="${basedir}/${drupalroot}/index.php" property="drupal.exists"/>
  <available file="${basedir}/${drupalroot}/sites/${drupalsite}/settings.php" property="drupal.settings.exists"/>
  <available file="${basedir}/${drupalroot}/sites/${drupalsite}/example.settings.local.php" property="drupal.example.settings.exists"/>
  <available file="${composerdir}/composer.skip" property="composer.executed"/>
  <available file="${composerbinfile}" property="composer.exists"/>
  <available file="${phpunitxml}" property="phpunit.xml.exists"/>
  <available file="${drupaldbfile}" property="drupaldbfile.exists"/>
  <available file="${basedir}/build.properties" property="build.properties.exists"/>
  <!-- Verify the presence of files consisting list of modules to enable. -->
  <available file="${basedir}/${modules-contrib-file}" property="contrib.txt.exists"/>
  <available file="${basedir}/${modules-custom-file}" property="custom.txt.exists"/>
  <available file="${basedir}/${modules-devel-file}" property="devel.txt.exists"/>
  <available file="${basedir}/${modules-features-file}" property="features.txt.exists"/>
  <!-- Load properties from the file when present. -->
  <condition property="parallel-lint" value="${vendorbindir}/parallel-lint.bat" else="${vendorbindir}/parallel-lint">
    <os family="windows"/>
  </condition>
  <target name="build" depends="prepare,parallel-lint,phploc,pdepend,phpmd-ci,phpcs-security-ci,phpcs-coder-ci,phpcpd,phpunit,behat,phpcov,combine-junit-xml,phpcb"/>
  <target name="build-parallel" depends="prepare,run-tests,combine-junit-xml"/>
  <target name="run-tests" description="Run tools in parallel">
    <parallel threadCount="2">
      <sequential>
        <antcall target="pdepend"/>
        <antcall target="phpmd-ci"/>
      </sequential>
      <antcall target="docblox"/>
      <antcall target="lint"/>
      <antcall target="phpcb"/>
      <antcall target="phpcov"/>
      <antcall target="phpcpd"/>
      <antcall target="phpcs-coder-ci"/>
      <antcall target="phpcs-security-ci"/>
      <antcall target="phploc"/>
      <antcall target="phpunit"/>
    </parallel>
  </target>
  <target name="clean" description="Cleanup build artifacts">
    <delete dir="${builddir}/api"/>
    <delete dir="${builddir}/behat"/>
    <delete dir="${builddir}/cache"/>
    <delete dir="${builddir}/code-browser"/>
    <delete dir="${builddir}/coverage"/>
    <delete dir="${builddir}/logs"/>
    <delete dir="${builddir}/pdepend"/>
    <delete file="${composerdir}/composer.lock"/>
    <delete file="${composerdir}/composer.skip"/>
  </target>
  <target name="prepare" depends="load-build-properties,clean,composer,coder" description="Prepare for build">
    <mkdir dir="${builddir}/api"/>
    <mkdir dir="${builddir}/behat"/>
    <mkdir dir="${builddir}/cache"/>
    <mkdir dir="${builddir}/code-browser"/>
    <mkdir dir="${builddir}/coverage"/>
    <mkdir dir="${builddir}/logs"/>
    <mkdir dir="${builddir}/logs/coverage"/>
    <mkdir dir="${builddir}/logs/junit"/>
    <mkdir dir="${builddir}/pdepend"/>
    <mkdir dir="${builddir}/phpdox"/>
  </target>
  <target name="load-build-properties" description="Load properties from the file." if="build.properties.exists">
    <property file="build.properties"/>
  </target>
  <!-- Define set of files -->
  <fileset id="drupal.fileset" dir="${drupalroot}">
    <include name="**/*.php"/>
    <include name="**/*.inc"/>
    <include name="**/*.module"/>
    <include name="**/*.install"/>
    <include name="**/*.profile"/>
    <include name="**/*.theme"/>
    <!-- Excludes any vendor dirs within Drupal root. -->
    <exclude name="**/vendor/**"/>
    <!-- Excludes coder_sniffer dir. -->
    <exclude name="**/coder_sniffer/Drupal/Test/**/*.php"/>
    <!-- @see: https://github.com/symfony/symfony/issues/11921 -->
    <exclude name="sites/all/libraries/**/Tests/**/*.php"/>
    <!-- @see: https://github.com/symfony/polyfill/issues/108 -->
    <exclude name="sites/all/libraries/**/Resources/**/*.php"/>
    <modified>
      <param name="cache.cachefile" value="${builddir}/cache/${project}.drupal.fileset.properties"/>
    </modified>
  </fileset>
  <fileset id="composer.fileset" dir="${composerdir}">
    <include name="**/*.php"/>
    <!-- Excludes coder_sniffer dir. -->
    <exclude name="vendor/**/coder_sniffer/Drupal/Test/**/*.php"/>
    <!-- E.g. squizlabs/php_codesniffer/CodeSniffer -->
    <exclude name="vendor/**/CodeSniffer/**"/>
    <!-- Ignores all PHP files found within vendor dir. -->
    <exclude name="vendor/**/*.php"/>
    <!-- @see: https://github.com/symfony/polyfill/issues/108 -->
    <exclude name="vendor/**/Resources/**/*.php"/>
    <!-- E.g. vendor/jakub-onderka/php-parallel-lint/tests/examples -->
    <exclude name="vendor/**/examples/**/*.php"/>
    <!-- E.g. vendor/pdepend/pdepend/src/test/resources/files -->
    <exclude name="vendor/**/resources/**/*.php"/>
    <modified>
      <param name="cache.cachefile" value="${builddir}/cache/${project}.composer.fileset.properties"/>
    </modified>
  </fileset>
  <target name="lint" depends="prepare,drupalcore,coder" if="drupal.exists">
    <apply executable="php" parallel="true" verbose="true" dir="${basedir}" failonerror="true">
      <arg value="-l"/>
      <fileset refid="composer.fileset"/>
    </apply>
    <apply executable="php" parallel="true" verbose="true" dir="${basedir}" failonerror="true">
      <arg value="-l"/>
      <fileset refid="drupal.fileset"/>
    </apply>
  </target>
  <target name="parallel-lint" description="Run PHP parallel lint" depends="prepare,drupalcore,coder" if="drupal.exists">
    <apply executable="${parallel-lint}" parallel="true" dir="${basedir}" failonerror="true">
      <arg line="-e"/>
      <arg value="${fileexts}"/>
      <fileset refid="composer.fileset"/>
    </apply>
    <apply executable="${parallel-lint}" parallel="true" dir="${basedir}" failonerror="true">
      <arg line="-e"/>
      <arg value="${fileexts}"/>
      <fileset refid="drupal.fileset"/>
    </apply>
  </target>
  <target name="phploc" description="Measure project size using PHPLOC">
    <exec executable="${vendorbindir}/phploc">
      <arg value="--log-csv"/>
      <arg value="${builddir}/logs/phploc.csv"/>
      <arg value="--names"/>
      <arg value="${fileextsexp}"/>
      <arg path="${drupalmodules}"/>
      <arg path="${drupalthemes}"/>
    </exec>
  </target>
  <target name="pdepend" depends="composer" description="Calculate software metrics using PHP_Depend" unless="pdepend.xml.present">
    <exec executable="${vendorbindir}/pdepend">
      <arg value="-d"/>
      <arg value="memory_limit=256M"/>
      <arg value="--suffix=${fileexts}"/>
      <arg value="--jdepend-xml=${builddir}/logs/jdepend.xml"/>
      <arg value="--jdepend-chart=${builddir}/pdepend/dependencies.svg"/>
      <arg value="--overview-pyramid=${builddir}/pdepend/overview-pyramid.svg"/>
      <arg value="--summary-xml=${builddir}/logs/pdepend.xml"/>
      <arg value="${pdependarg}"/>
      <arg path="${drupalmodules}"/>
    </exec>
    <available file="${builddir}/logs/pdepend.xml" property="pdepend.xml.present"/>
  </target>
  <target name="phpmd" depends="composer,drupalcore" description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing.">
    <exec executable="${vendorbindir}/phpmd">
      <arg value="--suffixes"/>
      <arg value="${fileexts}"/>
      <arg path="${drupalmodules}"/>
      <arg value="text"/>
      <!--<arg value="${builddir}/phpmd.xml"/>-->
      <arg value="codesize,unusedcode,naming"/>
    </exec>
  </target>
  <target name="phpmd-ci" depends="composer,drupalcore" description="Perform project mess detection using PHPMD creating a log file for the continuous integration server">
    <exec executable="${vendorbindir}/phpmd">
      <arg value="--suffixes"/>
      <arg value="${fileexts}"/>
      <arg path="${drupalmodules}"/>
      <arg value="xml"/>
      <arg value="codesize,unusedcode,naming"/>
      <!--<arg value="${builddir}/phpmd.xml"/>-->
      <arg value="--reportfile"/>
      <arg value="${builddir}/logs/pmd.xml"/>
    </exec>
  </target>
  <target name="phpcs-coder" depends="composer" if="drupal.exists" description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">
    <exec executable="${vendorbindir}/phpcs">
      <arg value="-d"/>
      <arg value="memory_limit=256M"/>
      <arg value="--standard=${basedir}/${drupalroot}/sites/all/modules/contrib/coder/coder_sniffer/Drupal"/>
      <arg value="--extensions=${fileexts}"/>
      <arg path="${drupalmodules}"/>
      <arg path="${drupalthemes}"/>
    </exec>
  </target>
  <target name="phpcs-coder-ci" depends="composer" if="drupal.exists" description="Find coding standard violations using PHP_CodeSniffer creating a log file for the continuous integration server.">
    <exec executable="${vendorbindir}/phpcs">
      <arg value="-d"/>
      <arg value="memory_limit=256M"/>
      <arg value="--standard=${basedir}/${drupalroot}/sites/all/modules/contrib/coder/coder_sniffer/Drupal"/>
      <arg value="--report=checkstyle"/>
      <arg value="--report-file=${builddir}/logs/checkstyle.xml"/>
      <arg value="--report-xml=${builddir}/logs/codesniffer.xml"/>
      <arg value="--extensions=${fileexts}"/>
      <arg path="${drupalmodules}"/>
      <arg path="${drupalthemes}"/>
    </exec>
  </target>
  <target name="phpcs-security" depends="composer" description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">
    <symlink link="${vendordir}/squizlabs/php_codesniffer/CodeSniffer/Standards/Security"
             resource="${vendordir}/pheromone/phpcs-security-audit/Security"
             overwrite="true"/>
    <exec executable="${vendorbindir}/phpcs">
      <arg value="-d"/>
      <arg value="memory_limit=256M"/>
      <arg value="--standard=${vendordir}/pheromone/phpcs-security-audit/example_drupal7_ruleset.xml"/>
      <arg value="--extensions={fileexts}"/>
      <arg path="${drupalmodules}"/>
      <arg path="${drupalthemes}"/>
    </exec>
  </target>
  <target name="phpcs-security-ci" depends="composer" description="Find coding standard violations using PHP_CodeSniffer creating a log file for the continuous integration server">
    <symlink link="${vendordir}/squizlabs/php_codesniffer/CodeSniffer/Standards/Security"
             resource="${vendordir}/pheromone/phpcs-security-audit/Security"
             overwrite="true"/>
    <exec executable="${vendorbindir}/phpcs">
      <arg value="-d"/>
      <arg value="memory_limit=256M"/>
      <arg value="--report=checkstyle"/>
      <arg value="--standard=${vendordir}/pheromone/phpcs-security-audit/example_drupal7_ruleset.xml"/>
      <arg value="--extensions=${fileexts}"/>
      <arg value="--report-file=${builddir}/logs/checkstyle-security.xml"/>
      <arg value="--report-xml=${builddir}/logs/codesniffer-security.xml"/>
      <arg path="${drupalmodules}"/>
      <arg path="${drupalthemes}"/>
    </exec>
  </target>
  <target name="phpcpd" description="Find duplicate code using PHPCPD">
    <exec executable="${vendorbindir}/phpcpd">
      <arg value="--log-pmd"/>
      <arg value="${builddir}/logs/pmd-cpd.xml"/>
      <arg value="--names"/>
      <arg value="${fileextsexp}"/>
      <arg value="--exclude"/>
      <arg value="${vendordir}"/>
      <arg path="${drupalmodules}"/>
    </exec>
  </target>
  <target name="docblox" description="Generate API documentation using docblox">
    <exec executable="${vendorbindir}/docblox">
      <arg value="-d"/>
      <arg value="${drupalmodules}"/>
      <arg value="-t"/>
      <arg value="${builddir}/phpdox"/>
    </exec>
  </target>
  <target name="phpunit" description="Run unit tests with PHPUnit" depends="composer" if="phpunit.xml.exists">
    <exec executable="${vendorbindir}/phpunit" failonerror="true">
      <env key="PATH" value="${vendorbindir}:${env.PATH}"/>
      <arg value="-d"/>
      <arg value="memory_limit=2G"/>
      <arg value="-c"/>
      <arg value="${phpunitxml}"/>
      <arg value="--testsuite"/>
      <arg value="All Code"/>
      <arg path="${drupalmodules}"/>
    </exec>
  </target>
  <target name="behat" description="Wrapper for BDD tests with Behat" depends="composer,build-drupal,phantomjs-start,php-webserver-start,web-service-start,enable-bdd-code-coverage,behat-test,behat-run">
    <antcall target="web-service-stop"/>
    <antcall target="php-webserver-stop"/>
    <antcall target="phantomjs-stop"/>
    <antcall target="drop-database"/>
    <fail unless="BehatDryRun" message="Behat Dry run failed so there are faulty feature files" />
  </target>
  <target name="behat-run" description="Run BDD tests with Behat" depends="composer" if="BehatDryRun">
    <exec executable="./bin/behat" failonerror="false" dir="${composerdir}">
      <env key="PATH" value="${env.PATH}:${vendorbindir}"/>
      <arg value="--profile"/>
      <arg value="ci"/>
    </exec>
  </target>
  <target name="behat-test" description="Dry Run BDD tests with Behat" depends="composer">
    <exec executable="./bin/behat" failonerror="false" dir="${composerdir}" resultproperty="BehatErrorCode">
      <env key="PATH" value="${env.PATH}:${vendorbindir}"/>
      <arg value="--dry-run"/>
      <arg value="--format"/>
      <arg value="progress"/>
    </exec>
    <condition property="BehatDryRun">
      <equals arg1="${BehatErrorCode}" arg2="0"/>
    </condition>
  </target>
  <target name="behat-system" description="Wrapper for BDD tests with Behat" depends="composer,phantomjs-start,php-webserver-start,web-service-start,enable-bdd-code-coverage,behat-test,behat-system-run">
    <antcall target="web-service-stop"/>
    <antcall target="php-webserver-stop"/>
    <antcall target="phantomjs-stop"/>
    <antcall target="drop-database"/>
    <fail unless="BehatDryRun" message="Behat Dry run failed so there are faulty feature files"/>
  </target>
  <target name="behat-system-run" description="Run BDD tests with Behat" depends="composer" if="BehatDryRun">
      <exec executable="./bin/behat" failonerror="false" dir="${basedir}/tests">
        <arg value="--profile" />
        <arg value="systemTest" />
      </exec>
  </target>
  <target name="phpcov" depends="composer" description="Generate HTML and clover output for coverage">
    <exec executable="${vendorbindir}/phpcov">
      <arg value="merge"/>
      <arg value="--clover=${builddir}/coverage/combined_clover.xml"/>
      <arg value="${builddir}/logs/coverage/"/>
    </exec>
    <exec executable="${vendorbindir}/phpcov">
      <arg value="merge"/>
      <arg value="--html=${builddir}/coverage/html"/>
      <arg value="${builddir}/logs/coverage/"/>
    </exec>
  </target>
  <target name="composer" description="Run Composer" depends="composer-check,composer-install,composer-update,composer-show" unless="composer.executed">
    <property name="composer.executed" value="true"/>
  </target>
  <target name="get-composer" description="Get Composer" unless="composer.exists">
    <mkdir dir="${vendorbindir}"/>
    <get dest="${vendorbindir}" skipexisting="true">
      <url url="https://getcomposer.org/composer.phar"/>
    </get>
    <available file="${composerbinfile}" property="composer.exists"/>
  </target>
  <target name="composer-check" description="Check Composer" depends="get-composer">
    <exec executable="php" failonerror="true" dir="${composerdir}">
      <arg value="${composerbinfile}"/>
      <arg value="self-update"/>
    </exec>
    <exec executable="php" failonerror="true" dir="${composerdir}" outputproperty="vendorbindir">
      <arg value="${composerbinfile}"/>
      <arg value="config"/>
      <arg value="bin-dir"/>
    </exec>
  </target>
  <target name="composer-install" description="Run Composer install" depends="get-composer" unless="composer.lock.exists">
    <exec executable="php" failonerror="true" dir="${composerdir}">
      <arg value="${composerbinfile}"/>
      <arg value="install"/>
      <arg value="--prefer-dist"/>
    </exec>
    <available file="${composerdir}/composer.lock" property="composer.lock.exists"/>
  </target>
  <target name="composer-update" description="Run Composer update" depends="get-composer" if="composer.lock.exists">
    <exec executable="php" failonerror="true" dir="${composerdir}">
      <arg value="${composerbinfile}"/>
      <arg value="update"/>
      <arg value="--prefer-dist"/>
    </exec>
    <available file="${composerdir}/composer.lock" property="composer.lock.exists"/>
  </target>
  <target name="composer-show" description="Run Composer show" depends="get-composer,composer-show-config" if="composer.lock.exists">
    <exec executable="php" failonerror="true" dir="${composerdir}" outputproperty="output-composer-show">
      <arg value="${composerbinfile}"/>
      <arg value="show"/>
    </exec>
    <echo message="${output-composer-show}"/>
  </target>
  <target name="composer-show-config" description="Show composer config settings" depends="get-composer">
    <exec executable="php" failonerror="true" dir="${composerdir}" outputproperty="output-composer-config">
      <arg value="${composerbinfile}"/>
      <arg value="config"/>
      <arg value="--list"/>
    </exec>
    <echo message="${output-composer-config}"/>
  </target>
  <target name="phpcb" depends="composer" description="Aggregate tool output with PHP_CodeBrowser" if="drupal.exists">
    <exec executable="${vendorbindir}/phpcb">
      <arg value="--log"/>
      <arg path="${builddir}/logs"/>
      <arg value="--source"/>
      <arg path="${drupalmodules}"/>
      <arg value="--output"/>
      <arg path="${builddir}/code-browser"/>
    </exec>
  </target>
  <target name="drupalcore" depends="composer" description="Download Drupal via Drush" unless="drupal.exists">
    <exec executable="${vendorbindir}/drush" dir="${basedir}/${drupalroot}/..">
      <arg value="-y"/>
      <arg value="dl"/>
      <arg value="drupal-7"/>
    </exec>
    <exec executable="sh" failonerror="true" dir="${basedir}/${drupalroot}/.." outputproperty="drupaldir">
      <arg value="-c"/>
      <arg value="echo drupal-7*"/>
    </exec>
    <symlink link="${basedir}/${drupalroot}" resource="${drupaldir}" overwrite="true"/>
    <available file="${basedir}/${drupalroot}/index.php" property="drupal.exists"/>
  </target>
  <target name="install-drupal" description="Install Drupal" depends="composer,drupalcore,configure-database,drop-database" unless="drupaldbfile.exists">
    <!-- @todo
    <exec executable="${vendorbindir}/drush" dir="${basedir}/${drupalroot}/..">
      <arg value="site-install"/>
    </exec>
    -->
  </target>
  <target name="coder" description="Drush to install Coder module" depends="setup-drupal">
    <exec executable="${vendorbindir}/drush" dir="${basedir}/${drupalroot}">
      <arg value="-y"/>
      <arg value="dl"/>
      <arg value="coder-8.x-2.12"/>
      <arg value="${drushurl}"/>
    </exec>
  </target>
  <target name="enable-bdd-code-coverage" depends="setup-drupal" description="Drush to enable code_coverage module to allow its capture during BDD tests">
    <exec executable="${vendorbindir}/drush" dir="${basedir}/${drupalroot}">
      <arg value="-y"/>
      <arg value="en"/>
      <arg value="code_coverage"/>
    </exec>
  </target>
  <target name="php-webserver-start" description="Start a simple webserver for PHP files" depends="setup-drupal">
    <exec executable="${scriptsdir}/start_php_web.sh" dir="${basedir}/${drupalroot}" spawn="true">
        </exec>
  </target>
  <target name="php-webserver-stop" description="Stop a simple webserver for PHP files">
    <exec executable="${scriptsdir}/stop_php_web.sh" dir="${basedir}/${drupalroot}" spawn="true">
        </exec>
  </target>
  <target name="phantomjs-start" description="Start a phantomjs">
    <exec executable="${scriptsdir}/start_phantomjs.sh" dir="${scriptsdir}" spawn="true">
    </exec>
  </target>
  <target name="phantomjs-stop" description="Stop a phantomjs">
    <exec executable="${scriptsdir}/stop_phantomjs.sh" dir="${scriptsdir}" spawn="true">
    </exec>
  </target>
  <target name="webserver-start" description="Start a simple webserver for json files">
    <exec executable="${scriptsdir}/start_web.sh" dir="${scriptsdir}" spawn="true">
        </exec>
  </target>
  <target name="webserver-stop" description="Stop a simple webserver for json files">
    <exec executable="${scriptsdir}/stop_web.sh" dir="${scriptsdir}" spawn="true">
        </exec>
  </target>
  <target name="configure-database" description="Configure settings.local.php file" if="settings.local.php.exists">
    <copy file="${basedir}/${drupalroot}/sites/default/example.settings.local.php" tofile="${basedir}/${drupalroot}/sites/default/settings.local.php" overwrite="yes"/>
    <exec executable="ex" failonerror="true" dir="${basedir}/${drupalroot}">
      <arg value="${basedir}/${drupalroot}/sites/default/settings.local.php"/>
      <arg value="+%s/'database'.*=&gt;.*'\zs.*\ze'/${db.name}/"/>
      <arg value="+%s/'username'.*=&gt;.*'\zs.*\ze'/${db.user}/"/>
      <arg value="+%s/'password'.*=&gt;.*'\zs.*\ze'/${db.pass}/"/>
      <arg value="+%s/'host'.*=&gt;.*'\zs.*\ze'/${db.host}/"/>
      <arg value="-scwq!"/>
    </exec>
    <available file="${basedir}/${drupalroot}/sites/default/settings.local.php" property="settings.local.php.exists"/>
  </target>
  <target name="setup-drupal" description="Setup Drupal installation" depends="composer,drupalcore,setup-database" unless="drupal.settings.exists">
    <exec executable="${vendorbindir}/drush" dir="${basedir}/${drupalroot}">
      <arg value="status"/>
    </exec>
  </target>
  <target name="setup-database" description="Setup the database" if="drupal.exists" depends="import-database,install-drupal">
  </target>
  <target name="import-database" description="Import the database" if="drupaldbfile.exists" depends="composer,drupalcore,configure-database,drop-database">
    <exec executable="bash" failonerror="true" dir="${basedir}/${drupalroot}" input="${drupaldbfile}">
      <arg value="-c"/>
      <arg value="`${vendorbindir}/drush sql-connect`"/>
    </exec>
  </target>
  <target name="drop-database" description="Clean the database" if="drupal.settings.exists">
    <exec executable="${vendorbindir}/drush" failonerror="true" dir="${basedir}/${drupalroot}">
      <arg value="sql-drop"/>
      <arg value="--yes"/>
    </exec>
  </target>
  <target name="web-service-start" description="Start the web service" if="webservicename">
    <exec executable="${scriptsdir}/start_service.sh" dir="${scriptsdir}" spawn="true">
      <arg value="${webservicename}"/>
      <if>
        <not>
          <equals arg1="${webservicerouterfile}" arg2=""/>
          <then>
            <arg value="${webservicerouterfile}"/>
          </then>
        </not>
      </if>
    </exec>
  </target>
  <target name="web-service-stop" description="Stop the web service" if="webservicename">
    <exec executable="${scriptsdir}/stop_service.sh" dir="${basedir}" spawn="true">
      <arg value="${webservicename}"/>
    </exec>
  </target>
  <target name="combine-junit-xml" description="Combine JUnits xml results files into a single for using on other apps.">
    <copy file="${builddir}/coverage/combined_clover.xml" todir="${builddir}/logs" failonerror="false"/>
    <fileset id="fileset" dir="${builddir}/behat">
      <include name="*.xml"/>
    </fileset>
    <pathconvert refid="fileset" property="converted" pathsep=" "/>
    <exec executable="${composerdir}/merge_junit_results.py" output="${builddir}/logs/junit/combined_junit.xml" failonerror="false">
      <env key="PATH" value="/opt/rh/python27/root/usr/bin:${env.PATH}"/>
      <env key="LD_LIBRARY_PATH" value="/opt/rh/python27/root/usr/lib64:${env.LD_LIBRARY_PATH}"/>
      <arg line="${converted}"/>
    </exec>
    <copy file="${builddir}/logs/junit.xml" todir="${builddir}/logs/junit" failonerror="false"/>
    <exec executable="${vendorbindir}/phpjunitmerge" failonerror="false">
      <arg value="${builddir}/logs/junit"/>
      <arg value="${builddir}/logs/combined_junit.xml"/>
    </exec>
  </target>
  <!-- Drupal targets -->
  <target name="build-drupal" depends="install,enable-contrib-modules,enable-custom-modules,enable-features-modules,drush-composer"/>
  <target name="drush-composer" description="Drush to install composer dependencies" depends="composer,setup-drupal">
    <exec executable="${vendorbindir}/drush" dir="${basedir}/${drupalroot}">
      <arg value="-y"/>
      <arg value="en"/>
      <arg value="composer_manager"/>
    </exec>
    <exec executable="${vendorbindir}/drush" dir="${basedir}/${drupalroot}">
      <arg value="composer-json-rebuild"/>
      <arg value="--no-dev"/>
      <arg value="-o"/>
    </exec>
    <exec executable="php" dir="${composerdir}">
      <env key="COMPOSER_VENDOR_DIR" value="${basedir}/${drupallibraries}/composer"/>
      <env key="COMPOSER" value="${drupalfiles}/composer/composer.json"/>
      <arg value="${composerbinfile}"/>
      <arg value="update"/>
      <arg value="--no-dev"/>
      <arg value="--prefer-source"/>
      <arg value="-o"/>
    </exec>
    <exec executable="php" dir="${composerdir}">
      <env key="COMPOSER_VENDOR_DIR" value="${basedir}/${drupallibraries}/composer"/>
      <env key="COMPOSER" value="${drupalfiles}/composer/composer.json"/>
      <arg value="${composerbinfile}"/>
      <arg value="dump-autoload"/>
    </exec>
  </target>
  <target name="enable-contrib-modules" description="Enables Drupal contrib modules." if="contrib.txt.exists">
    <antcall target="drush-en">
      <param name="file" value="${contrib.txt.exists}"/>
    </antcall>
  </target>
  <target name="enable-custom-modules" description="Enables Drupal custom modules." if="custom.txt.exists">
    <antcall target="drush-en">
      <param name="file" value="${custom.txt.exists}"/>
    </antcall>
  </target>
  <target name="enable-devel-modules" description="Enables Drupal development modules." if="devel.txt.exists">
    <antcall target="drush-en">
      <param name="file" value="${devel.txt.exists}"/>
    </antcall>
  </target>
  <target name="enable-features-modules" description="Enables Drupal features modules." if="features.txt.exists">
    <antcall target="drush-en">
      <param name="file" value="${features.txt.exists}"/>
    </antcall>
  </target>
  <target name="drush-en" depends="setup-drupal" description="Runs Drush to enable modules listed in the file.">
    <exec executable="bash" dir="${drupalroot}">
      <env key="PATH" value="${env.PATH}:${buildbin}"/>
      <arg value="-c"/>
      <arg value="cat ${file} | xargs drush -y en"/>
    </exec>
  </target>
  <target name="check-settings-file">
    <available file="${basedir}/${drupalroot}/sites/default/settings.php" property="settings.php.exists"/>
  </target>
  <target name="remove-settings-file" depends="check-settings-file" if="settings.php.exists">
    <delete file="${drupalroot}/sites/${drupalsite}/settings.php"/>
  </target>
  <target name="install" depends="install-run,drush-composer" />
  <target name="install-run" depends="remove-settings-file,composer">
    <echo message="Running site install against Drupal"/>
    <exec executable="${buildbin}/drush" dir="${basedir}/${drupalroot}">
      <env key="PATH" value="${env.PATH}:${buildbin}"/>
      <arg value="site-install"/>
      <arg value="-y"/>
      <arg value="minimal"/>
      <arg value="--account-name=${admin.user}"/>
      <arg value="--account-pass=${admin.pass}"/>
      <arg value="--db-url=${db.url}"/>
    </exec>
    <chmod file="${basedir}/${drupalroot}/sites/default/settings.php" perm="+rw" type="file"/>
    <chmod file="${basedir}/${drupalroot}/sites/default" perm="+rwx" type="dir"/>
  </target>
</project>
