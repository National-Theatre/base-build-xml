<?xml version="1.0" encoding="UTF-8"?>
<project>
  <property environment="env"/>

   <target name="tools-parallel"
         description="Run tools in parallel">
  <parallel threadCount="2">
   <sequential>
    <antcall target="pdepend"/>
    <antcall target="phpmd-ci"/>
   </sequential>
   <antcall target="phpcpd"/>
   <antcall target="phpcs-ci"/>
   <antcall target="phploc"/>
   <antcall target="docblox"/>
  </parallel>
 </target>

 <target name="clean" description="Cleanup build artifacts">
    <delete dir="${basedir}/build/api"/>
    <delete dir="${basedir}/build/code-browser"/>
    <delete dir="${basedir}/build/coverage"/>
    <delete dir="${basedir}/build/logs"/>
    <delete dir="${basedir}/build/pdepend"/>
    <delete dir="${basedir}/build/behat"/>
 </target>

 <target name="prepare" depends="clean,composer,coder"
         description="Prepare for build">
    <mkdir dir="${basedir}/build/api"/>
    <mkdir dir="${basedir}/build/code-browser"/>
    <mkdir dir="${basedir}/build/coverage"/>
    <mkdir dir="${basedir}/build/logs"/>
    <mkdir dir="${basedir}/build/logs/coverage"/>
    <mkdir dir="${basedir}/build/logs/junit"/>
    <mkdir dir="${basedir}/build/pdepend"/>
    <mkdir dir="${basedir}/build/phpdox"/>
    <mkdir dir="${basedir}/build/behat"/>
 </target>

 <target name="lint">
  <apply executable="php" failonerror="true">
   <arg value="-l" />

   <fileset dir="${basedir}/drupal">
    <include name="**/*.php" />
    <include name="**/*.inc" />
    <include name="**/*.module" />
    <include name="**/*.install" />
    <include name="**/*.profile" />
    <include name="**/*.theme" />
    <exclude name="sites/all/modules/contrib/coder/**/*.php" />
    <exclude name="sites/all/modules/contrib/coder/**/*.inc" />
    <exclude name="sites/all/modules/contrib/coder/**/*.module" />
    <exclude name="sites/all/modules/coder/**/*.php" />
    <exclude name="sites/all/modules/coder/**/*.inc" />
    <exclude name="sites/all/modules/coder/**/*.module" />
    <modified>
      <param name="cache.cachefile" value="../cache.properties.${project}"/>
    </modified>
   </fileset>

   <fileset dir="${basedir}/tests">
    <include name="**/*.php" />
    <exclude name="vendor/**/*.php" />
    <modified>
      <param name="cache.cachefile" value="../cache.properties.${project}.tests"/>
    </modified>
   </fileset>
  </apply>
 </target>

 <target name="phploc" description="Measure project size using PHPLOC">
  <exec executable="${buildbin}/phploc">
   <arg value="--log-csv" />
   <arg value="${basedir}/build/logs/phploc.csv" />
   <arg value="--names" />
   <arg value="*.php,*.module,*.inc,*.install,*.profile,*.theme" />
   <arg path="${drupalmodules}" />
  </exec>
 </target>

 <target name="pdepend" depends="composer"
         description="Calculate software metrics using PHP_Depend">
  <exec executable="${buildbin}/pdepend">
   <arg value="-d" />
   <arg value="memory_limit=256M" />
   <arg value="--suffix=php,module,inc,install,profile,theme" />
   <arg value="--jdepend-xml=${basedir}/build/logs/jdepend.xml" />
   <arg value="--jdepend-chart=${basedir}/build/pdepend/dependencies.svg" />
   <arg value="--overview-pyramid=${basedir}/build/pdepend/overview-pyramid.svg" />
   <arg value="--summary-xml=${basedir}/build/logs/pdepend.xml" />
   <arg path="${drupalmodules}" />
  </exec>
 </target>

 <target name="phpmd" depends="composer"
         description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing.">
  <exec executable="${buildbin}/phpmd">
   <arg value="--suffixes" />
   <arg value="php,module,inc,install,profile,theme" />
   <arg path="${drupalmodules}" />
   <arg value="text" />
   <!--<arg value="${basedir}/build/phpmd.xml" />-->
   <arg value="codesize,unusedcode,naming" />
  </exec>
 </target>

 <target name="phpmd-ci" depends="composer"
         description="Perform project mess detection using PHPMD creating a log file for the continuous integration server">
  <exec executable="${buildbin}/phpmd">
   <arg value="--suffixes" />
   <arg value="php,module,inc,install,profile,theme" />
   <arg path="${drupalmodules}" />
   <arg value="xml" />
   <arg value="codesize,unusedcode,naming" />
   <!--<arg value="${basedir}/build/phpmd.xml" />-->
   <arg value="--reportfile" />
   <arg value="${basedir}/build/logs/pmd.xml" />
  </exec>
 </target>

 <target name="phpcs" depends="composer,coder"
         description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">
  <exec executable="${buildbin}/phpcs">
   <arg value="-d" />
   <arg value="memory_limit=256M" />
   <arg value="--standard=${basedir}/drupal/sites/all/modules/contrib/coder/coder_sniffer/Drupal" />
   <arg value="--extensions=php,module,inc,install,profile,theme" />
   <!-- ignore test for now -->
   <arg path="${drupalmodules}" />
  </exec>
 </target>

 <target name="phpcs-ci" depends="composer,coder"
         description="Find coding standard violations using PHP_CodeSniffer creating a log file for the continuous integration server">
  <exec executable="${buildbin}/phpcs">
   <arg value="--report=checkstyle" />
   <arg value="--report-file=${basedir}/build/logs/checkstyle.xml" />
   <arg value="--report-xml=${basedir}/build/logs/codesniffer.xml" />
   <arg value="-d" />
   <arg value="memory_limit=256M" />
   <arg value="--standard=${basedir}/drupal/sites/all/modules/contrib/coder/coder_sniffer/Drupal" />
   <arg value="--extensions=php,module,inc,install,profile,theme" />
   <!-- ignore test for now -->
   <arg path="${drupalmodules}" />
  </exec>
 </target>
 
  <target name="phpcs-security" depends="composer"
         description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">
   <symlink link="${basedir}/tests/vendor/squizlabs/php_codesniffer/CodeSniffer/Standards/Security" resource="${basedir}/tests/vendor/pheromone/phpcs-security-audit/Security" overwrite="true"/>
  <exec executable="${buildbin}/phpcs">
   <arg value="-d" />
   <arg value="memory_limit=256M" />
   <arg value="--standard=${basedir}/tests/vendor/pheromone/phpcs-security-audit/example_drupal7_ruleset.xml" />
   <arg value="--extensions=php,module,inc,install,profile,theme" />
   <!-- ignore test for now -->
   <arg path="${drupalmodules}" />
  </exec>
 </target>

 <target name="phpcs-security-ci" depends="composer"
         description="Find coding standard violations using PHP_CodeSniffer creating a log file for the continuous integration server">
   <symlink link="${basedir}/tests/vendor/squizlabs/php_codesniffer/CodeSniffer/Standards/Security" resource="${basedir}/tests/vendor/pheromone/phpcs-security-audit/Security" overwrite="true"/>
  <exec executable="${buildbin}/phpcs">
   <arg value="--report=checkstyle" />
   <arg value="--report-file=${basedir}/build/logs/checkstyle-security.xml" />
   <arg value="--report-xml=${basedir}/build/logs/codesniffer-security.xml" />
   <arg value="-d" />
   <arg value="memory_limit=256M" />
   <arg value="--standard=${basedir}/tests/vendor/pheromone/phpcs-security-audit/example_drupal7_ruleset.xml" />
   <arg value="--extensions=php,module,inc,install,profile,theme" />
   <!-- ignore test for now -->
   <arg path="${drupalmodules}" />
  </exec>
 </target>

 <target name="phpcpd" description="Find duplicate code using PHPCPD">
  <exec executable="${buildbin}/phpcpd">
   <arg value="--log-pmd" />
   <arg value="${basedir}/build/logs/pmd-cpd.xml" />
   <arg value="--names" />
   <arg value="*.php,*.module,*.inc,*.install,*.profile,*.theme" />   
   <arg path="${drupalmodules}" />   
  </exec>
 </target>

    <target name="docblox"
         description="Generate API documentation using docblox">
        <exec executable="${buildbin}/docblox">
            <arg value="-d" />
            <arg value="${drupalmodules}" />
            <arg value="-t" />
            <arg value="${basedir}/build/phpdox" />
        </exec>
    </target>

    <target name="phpunit" description="Run unit tests with PHPUnit">
        <exec executable="${buildbin}/phpunit" failonerror="true">
	  <env key="PATH" value="${buildbin}:${env.PATH}"/>
            <arg value="-d" />
            <arg value="memory_limit=2G" />
            <arg value="-c" />
            <arg value="${basedir}/tests/phpunit-ci.xml" />
            <arg value="--testsuite" />
            <arg value="All Code" />
	    <arg path="${drupalmodules}" />
        </exec>
    </target>

    <target name="behat" description="Wrapper for BDD tests with Behat" depends="composer,phantomjs-start,php-webserver-start,service-layer-start,enable-bdd-code-coverage,behat-test,behat-run">
      <antcall target="service-layer-stop"/>
      <antcall target="php-webserver-stop"/>
      <antcall target="phantomjs-stop"/>
      <antcall target="drop-database"/>
      <fail unless="BehatDryRun" message="Behat Dry run failed so there are faulty feature files" />
    </target>
    
    <target name="behat-run" description="Run BDD tests with Behat" depends="composer" if="BehatDryRun">
       <exec executable="./bin/behat" failonerror="false" dir="${basedir}/tests">
         <arg value="--profile" />
         <arg value="ci" />
       </exec>
    </target>
    
    <target name="behat-test" description="Dry Run BDD tests with Behat" depends="composer">
       <exec executable="./bin/behat" failonerror="false" dir="${basedir}/tests" resultproperty="BehatErrorCode">
	 <arg value="--dry-run" />
	 <arg value="--format" />
	 <arg value="progress" />
       </exec>
       <condition property="BehatDryRun">
	 <equals arg1="${BehatErrorCode}" arg2="0" />
       </condition>
    </target>
    
    <target name="phpcov" depends="composer"
         description="Generate HTML and clover output for coverage">
      <exec executable="${buildbin}/phpcov">
        <arg value="merge" />
        <arg value="--clover=${basedir}/build/coverage/combined_clover.xml" />
        <arg value="${basedir}/build/logs/coverage/" />
      </exec>
      <exec executable="${buildbin}/phpcov">
        <arg value="merge" />
        <arg value="--html=${basedir}/build/coverage/html" />
        <arg value="${basedir}/build/logs/coverage/" />
      </exec>
    </target>

    <target name="composer" description="Run Composer"
	    depends="composer-check,composer-install,composer-update" unless="composer.executed">
      <property name="composer.executed" value="true" />
    </target>

    <target name="composer-check" description="Check Composer">
        <exec executable="php" failonerror="true" dir="${basedir}/tests">
            <arg value="composer.phar" />
            <arg value="self-update" />
        </exec>
        <available file="${basedir}/tests/composer.lock" property="composer.lock.exists"/>
    </target>

    <target name="composer-install" description="Run Composer install" unless="composer.lock.exists">
        <exec executable="php" failonerror="true" dir="${basedir}/tests">
            <env key="TMPDIR" path="${basedir}/../" />
            <arg value="composer.phar" />
            <arg value="install" />
        </exec>
    </target>

    <target name="composer-update" description="Run Composer update" if="composer.lock.exists">
        <exec executable="php" failonerror="true" dir="${basedir}/tests">
            <env key="TMPDIR" path="${basedir}/../" />
            <arg value="composer.phar" />
            <arg value="update" />
        </exec>
    </target>
 
 <target name="phpcb" depends="composer"
         description="Aggregate tool output with PHP_CodeBrowser">
  <exec executable="${buildbin}/phpcb">
   <arg value="--log" />
   <arg path="${basedir}/build/logs" />
   <arg value="--source" />
   <arg path="${drupalmodules}" />
   <arg value="--output" />
   <arg path="${basedir}/build/code-browser" />
  </exec>
 </target>

  <target name="coder" depends="composer"
    description="Drush to install coder module">
    <exec executable="${buildbin}/drush" dir="${basedir}/drupal">
      <arg value="dl" />
      <arg value="coder" />
    </exec>
  </target>
  <target name="enable-bdd-code-coverage" depends="composer"
    description="Drush to enable code_coverage module to allow its capture during BDD tests">
    <exec executable="${buildbin}/drush" dir="${basedir}/drupal">
      <arg value="-y" />
      <arg value="en" />
      <arg value="code_coverage" />
    </exec>
  </target>
  <target name="php-webserver-start" description="Start a simple webserver for PHP files" depends="setup-database">
        <exec executable="${basedir}/tests/test_cases/start_php_web.sh" dir="${basedir}/drupal" spawn="true">
        </exec>
  </target>
  <target name="php-webserver-stop" description="Stop a simple webserver for PHP files">
        <exec executable="${basedir}/tests/test_cases/stop_php_web.sh" dir="${basedir}/drupal" spawn="true">
        </exec>
  </target>
  <target name="phantomjs-start" description="Start a phantomjs">
    <exec executable="${basedir}/tests/test_cases/start_phantomjs.sh" dir="${basedir}/tests/test_cases" spawn="true">
    </exec>
  </target>
  <target name="phantomjs-stop" description="Stop a phantomjs">
    <exec executable="${basedir}/tests/test_cases/stop_phantomjs.sh" dir="${basedir}/tests/test_cases" spawn="true">
    </exec>
  </target>
  <target name="webserver-start" description="Start a simple webserver for json files">
        <exec executable="${basedir}/tests/test_cases/start_web.sh" dir="${basedir}/tests/test_cases" spawn="true">
        </exec>
  </target>
  <target name="webserver-stop" description="Stop a simple webserver for json files">
        <exec executable="${basedir}/tests/test_cases/stop_web.sh" dir="${basedir}/tests/test_cases" spawn="true">
        </exec>
  </target>
  <target name="configure-database" description="set settings.php file">
    <copy file="${basedir}/tests/includes/settings.php" tofile="${basedir}/drupal/sites/default/settings.php" overwrite="yes" />
  </target>
  <target name="setup-database" description="Import the database" depends="composer,configure-database,drop-database">
    <exec executable="bash" failonerror="true" dir="${basedir}/drupal" input="${basedir}/tests/includes/ntdp_drupal.sql">
        <arg value="-c"/>
	<arg value="`${buildbin}/drush sql-connect`"/>
    </exec>
  </target>
  <target name="drop-database" description="Clean the database" >
	  <exec executable="${buildbin}/drush" failonerror="true" dir="${basedir}/drupal">
        <arg value="sql-drop" />
        <arg value="--yes" />
    </exec>
  </target>
  <target name="service-layer-start" description="Start the mock service layer.">
    <exec executable="${basedir}/tests/test_cases/start_service_layer.sh" dir="${basedir}/tests/test_cases" spawn="true">
    </exec>
  </target>
  <target name="service-layer-stop" description="Stop the mock service layer.">
    <exec executable="${basedir}/tests/test_cases/stop_service_layer.sh" dir="${basedir}/tests/test_cases" spawn="true">
    </exec>
  </target>
  <target name="combine-junit-xml" description="Combine JUnits xml results files into a single for using on other apps.">
    <copy file="${basedir}/build/coverage/combined_clover.xml" todir="${basedir}/build/logs" failonerror="false" />
    <fileset id="fileset" dir="${basedir}/build/behat">
      <include name="*"/>
    </fileset>
    <pathconvert refid="fileset" property="converted" pathsep=" "/>
    <exec executable="${basedir}/tests/merge_junit_results.py" output="${basedir}/build/logs/junit/combined_junit.xml" failonerror="false">
      <env key="PATH" value="/opt/rh/python27/root/usr/bin:${env.PATH}"/>
      <env key="LD_LIBRARY_PATH" value="/opt/rh/python27/root/usr/lib64:${env.LD_LIBRARY_PATH}"/>
      <arg line="${converted}"/>
    </exec>
    <copy file="${basedir}/build/logs/junit.xml" todir="${basedir}/build/logs/junit" failonerror="false" />
    <exec executable="${buildbin}/phpjunitmerge" failonerror="false" >
      <arg value="${basedir}/build/logs/junit" />
      <arg value="${basedir}/build/logs/combined_junit.xml" />
    </exec>
  </target>
</project>
